
int _init(EVP_PKEY_CTX *ctx)

{
  undefined *puVar1;
  
  puVar1 = PTR___gmon_start___00104fe8;
  if (PTR___gmon_start___00104fe8 != (undefined *)0x0) {
    puVar1 = (undefined *)(*(code *)PTR___gmon_start___00104fe8)();
  }
  return (int)puVar1;
}



void FUN_00101020(void)

{
  (*(code *)PTR_00104f58)();
  return;
}



void __cxa_finalize(void)

{
  (*(code *)PTR___cxa_finalize_00104fc8)();
  return;
}





void std::__throw_bad_alloc(void)

{
  (*(code *)PTR___throw_bad_alloc_00104f60)();
  return;
}





void std::__throw_length_error(char *param_1)

{
  (*(code *)PTR___throw_length_error_00104f68)();
  return;
}





void std::__throw_bad_array_new_length(void)

{
  (*(code *)PTR___throw_bad_array_new_length_00104f70)();
  return;
}



void __cxa_atexit(void)

{
  (*(code *)PTR___cxa_atexit_00104f78)();
  return;
}





basic_ostream * std::operator<<(basic_ostream *param_1,char *param_2)

{
  basic_ostream *pbVar1;
  
  pbVar1 = (basic_ostream *)(*(code *)PTR_operator<<_00104f80)();
  return pbVar1;
}





void * operator_new(ulong param_1)

{
  void *pvVar1;
  
  pvVar1 = (void *)(*(code *)PTR_operator_new_00104f88)();
  return pvVar1;
}





void operator_delete(void *param_1,ulong param_2)

{
  (*(code *)PTR_operator_delete_00104f90)();
  return;
}



void __thiscall
std::basic_ostream<char,std::char_traits<char>>::operator<<
          (basic_ostream<char,std::char_traits<char>> *this,
          _func_basic_ostream_ptr_basic_ostream_ptr *param_1)

{
  (*(code *)PTR_operator<<_00104f98)();
  return;
}



void __stack_chk_fail(void)

{
  (*(code *)PTR___stack_chk_fail_00104fa0)();
  return;
}



void __thiscall std::ios_base::Init::Init(Init *this)

{
  (*(code *)PTR_Init_00104fa8)();
  return;
}





void * memmove(void *__dest,void *__src,size_t __n)

{
  void *pvVar1;
  
  pvVar1 = (void *)(*(code *)PTR_memmove_00104fb0)();
  return pvVar1;
}



void __thiscall
std::basic_ostream<char,std::char_traits<char>>::operator<<
          (basic_ostream<char,std::char_traits<char>> *this,int param_1)

{
  (*(code *)PTR_operator<<_00104fb8)();
  return;
}



void _Unwind_Resume(void)

{
  (*(code *)PTR__Unwind_Resume_00104fc0)();
  return;
}



void processEntry _start(undefined8 param_1,undefined8 param_2)

{
  undefined auStack_8 [8];
  
  (*(code *)PTR___libc_start_main_00104fd8)(main,param_2,&stack0x00000008,0,0,param_1,auStack_8);
  do {
                    
  } while( true );
}






void deregister_tm_clones(void)

{
  return;
}






void register_tm_clones(void)

{
  return;
}



void __do_global_dtors_aux(void)

{
  if (completed_0 == '\0') {
    if (PTR___cxa_finalize_00104fc8 != (undefined *)0x0) {
      __cxa_finalize(__dso_handle);
    }
    deregister_tm_clones();
    completed_0 = 1;
    return;
  }
  return;
}



void frame_dummy(void)

{
  register_tm_clones();
  return;
}





undefined8 even(int param_1,int param_2)

{
  undefined8 uVar1;
  
  if (((param_1 & 1U) == 0) && ((param_2 & 1U) == 0)) {
    uVar1 = 1;
  }
  else {
    uVar1 = 0;
  }
  return uVar1;
}



undefined8 main(void)

{
  __normal_iterator _Var1;
  __normal_iterator _Var2;
  __normal_iterator _Var3;
  pair pVar4;
  undefined4 extraout_var;
  basic_ostream *pbVar5;
  int *piVar6;
  basic_ostream<char,std::char_traits<char>> *pbVar7;
  undefined4 extraout_var_00;
  long in_FS_OFFSET;
  undefined8 local_d8;
  undefined8 local_d0;
  undefined8 local_c8 [2];
  undefined8 local_b8 [2];
  vector<int,std::allocator<int>> local_a8 [32];
  allocator<int> local_88 [32];
  undefined4 local_68;
  undefined4 local_64;
  undefined4 local_60;
  undefined4 local_5c;
  undefined4 local_58;
  undefined4 local_54;
  undefined4 local_50;
  long local_40;
  
  local_40 = *(long *)(in_FS_OFFSET + 0x28);
  local_68 = 2;
  local_64 = 3;
  local_60 = 4;
  local_5c = 5;
  local_58 = 6;
  std::allocator<int>::allocator();
                    
  std::vector<int,std::allocator<int>>::vector((initializer_list)local_a8,(allocator *)&local_68);
  std::allocator<int>::~allocator(local_88);
  local_68 = 2;
  local_64 = 3;
  local_60 = 6;
  local_5c = 7;
  local_58 = 8;
  local_54 = 9;
  local_50 = 10;
  std::allocator<int>::allocator();
                    
  std::vector<int,std::allocator<int>>::vector((initializer_list)local_88,(allocator *)&local_68);
  std::allocator<int>::~allocator((allocator<int> *)local_b8);
  local_d8 = 0;
  local_d0 = 0;
  _Var1 = std::vector<int,std::allocator<int>>::begin();
  _Var2 = std::vector<int,std::allocator<int>>::end();
  _Var3 = std::vector<int,std::allocator<int>>::begin();
                    
  pVar4 = std::
          mismatch<__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>>
                    (_Var3,_Var2,_Var1);
  local_c8[0] = CONCAT44(extraout_var,pVar4);
  std::
  pair<__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>>
  ::operator=((pair<__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>>
               *)&local_d8,(pair *)local_c8);
  pbVar5 = std::operator<<((basic_ostream *)std::cout,"First mismatch : ");
  piVar6 = (int *)__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>::operator*
                            ((__normal_iterator<int*,std::vector<int,std::allocator<int>>> *)
                             &local_d8);
  pbVar7 = (basic_ostream<char,std::char_traits<char>> *)
           std::basic_ostream<char,std::char_traits<char>>::operator<<
                     ((basic_ostream<char,std::char_traits<char>> *)pbVar5,*piVar6);
  std::basic_ostream<char,std::char_traits<char>>::operator<<
            (pbVar7,(_func_basic_ostream_ptr_basic_ostream_ptr *)
                    PTR_endl<char,std_char_traits<char>>_00104fd0);
  pbVar5 = std::operator<<((basic_ostream *)std::cout,"Second mismatch : ");
  piVar6 = (int *)__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>::operator*
                            ((__normal_iterator<int*,std::vector<int,std::allocator<int>>> *)
                             &local_d0);
  pbVar7 = (basic_ostream<char,std::char_traits<char>> *)
           std::basic_ostream<char,std::char_traits<char>>::operator<<
                     ((basic_ostream<char,std::char_traits<char>> *)pbVar5,*piVar6);
  std::basic_ostream<char,std::char_traits<char>>::operator<<
            (pbVar7,(_func_basic_ostream_ptr_basic_ostream_ptr *)
                    PTR_endl<char,std_char_traits<char>>_00104fd0);
  _Var1 = std::vector<int,std::allocator<int>>::begin();
  _Var2 = std::vector<int,std::allocator<int>>::end();
  _Var3 = std::vector<int,std::allocator<int>>::begin();
  pVar4 = std::
          mismatch<__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>,bool(*)(int,int)>
                    (_Var3,_Var2,_Var1,even);
  local_b8[0] = CONCAT44(extraout_var_00,pVar4);
  std::
  pair<__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>>
  ::operator=((pair<__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>>
               *)&local_d8,(pair *)local_b8);
  pbVar5 = std::operator<<((basic_ostream *)std::cout,"First mismatch : ");
  piVar6 = (int *)__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>::operator*
                            ((__normal_iterator<int*,std::vector<int,std::allocator<int>>> *)
                             &local_d8);
  pbVar7 = (basic_ostream<char,std::char_traits<char>> *)
           std::basic_ostream<char,std::char_traits<char>>::operator<<
                     ((basic_ostream<char,std::char_traits<char>> *)pbVar5,*piVar6);
  std::basic_ostream<char,std::char_traits<char>>::operator<<
            (pbVar7,(_func_basic_ostream_ptr_basic_ostream_ptr *)
                    PTR_endl<char,std_char_traits<char>>_00104fd0);
  pbVar5 = std::operator<<((basic_ostream *)std::cout,"Second mismatch : ");
  piVar6 = (int *)__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>::operator*
                            ((__normal_iterator<int*,std::vector<int,std::allocator<int>>> *)
                             &local_d0);
  pbVar7 = (basic_ostream<char,std::char_traits<char>> *)
           std::basic_ostream<char,std::char_traits<char>>::operator<<
                     ((basic_ostream<char,std::char_traits<char>> *)pbVar5,*piVar6);
  std::basic_ostream<char,std::char_traits<char>>::operator<<
            (pbVar7,(_func_basic_ostream_ptr_basic_ostream_ptr *)
                    PTR_endl<char,std_char_traits<char>>_00104fd0);
  std::vector<int,std::allocator<int>>::~vector((vector<int,std::allocator<int>> *)local_88);
  std::vector<int,std::allocator<int>>::~vector(local_a8);
  if (local_40 != *(long *)(in_FS_OFFSET + 0x28)) {
                    
    __stack_chk_fail();
  }
  return 0;
}





void __static_initialization_and_destruction_0(int param_1,int param_2)

{
  if ((param_1 == 1) && (param_2 == 0xffff)) {
    std::ios_base::Init::Init((Init *)&std::__ioinit);
    __cxa_atexit(PTR__Init_00104ff8,&std::__ioinit,&__dso_handle);
  }
  return;
}






void _GLOBAL__sub_I_even(void)

{
  __static_initialization_and_destruction_0(1,0xffff);
  return;
}






void __gnu_cxx::__ops::__iter_equal_to_iter(void)

{
  return;
}






ulong * std::min<unsigned_long>(ulong *param_1,ulong *param_2)

{
  if (*param_2 < *param_1) {
    param_1 = param_2;
  }
  return param_1;
}






void std::allocator<int>::allocator(void)

{
  __gnu_cxx::new_allocator<int>::new_allocator();
  return;
}





void __thiscall std::allocator<int>::~allocator(allocator<int> *this)

{
  __gnu_cxx::new_allocator<int>::~new_allocator((new_allocator<int> *)this);
  return;
}





void std::vector<int,std::allocator<int>>::vector(initializer_list param_1,allocator *param_2)

{
  long lVar1;
  forward_iterator_tag fVar2;
  int *piVar3;
  allocator *in_RCX;
  undefined4 in_register_0000003c;
  long in_FS_OFFSET;
  
  lVar1 = *(long *)(in_FS_OFFSET + 0x28);
  _Vector_base<int,std::allocator<int>>::_Vector_base
            ((_Vector_base<int,std::allocator<int>> *)(int *)CONCAT44(in_register_0000003c,param_1),
             in_RCX);
  fVar2 = initializer_list<int>::end();
  piVar3 = (int *)initializer_list<int>::begin();
                    
  _M_range_initialize<int_const*>((int *)CONCAT44(in_register_0000003c,param_1),piVar3,fVar2);
  if (lVar1 != *(long *)(in_FS_OFFSET + 0x28)) {
                    
    __stack_chk_fail();
  }
  return;
}





void __thiscall std::vector<int,std::allocator<int>>::~vector(vector<int,std::allocator<int>> *this)

{
  allocator *paVar1;
  
  paVar1 = (allocator *)_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator();
  _Destroy<int*,int>(*(int **)this,*(int **)(this + 8),paVar1);
  _Vector_base<int,std::allocator<int>>::~_Vector_base
            ((_Vector_base<int,std::allocator<int>> *)this);
  return;
}






undefined8 std::vector<int,std::allocator<int>>::begin(void)

{
  int **in_RDI;
  long in_FS_OFFSET;
  undefined8 local_18;
  long local_10;
  
  local_10 = *(long *)(in_FS_OFFSET + 0x28);
  __gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>::__normal_iterator
            ((__normal_iterator<int*,std::vector<int,std::allocator<int>>> *)&local_18,in_RDI);
  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {
                    
    __stack_chk_fail();
  }
  return local_18;
}






undefined8 std::vector<int,std::allocator<int>>::end(void)

{
  long in_RDI;
  long in_FS_OFFSET;
  undefined8 local_18;
  long local_10;
  
  local_10 = *(long *)(in_FS_OFFSET + 0x28);
  __gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>::__normal_iterator
            ((__normal_iterator<int*,std::vector<int,std::allocator<int>>> *)&local_18,
             (int **)(in_RDI + 8));
  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {
                    
    __stack_chk_fail();
  }
  return local_18;
}






pair std::
     mismatch<__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>>
               (__normal_iterator param_1,__normal_iterator param_2,__normal_iterator param_3)

{
  pair pVar1;
  
  __gnu_cxx::__ops::__iter_equal_to_iter();
  pVar1 = __mismatch<__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>,__gnu_cxx::__ops::_Iter_equal_to_iter>
                    (param_1,param_2,param_3,param_2);
  return pVar1;
}





pair<__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>>
* __thiscall
std::
pair<__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>>
::operator=(pair<__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>>
            *this,pair *param_1)

{
  undefined8 *puVar1;
  
  puVar1 = (undefined8 *)
           forward<__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>>
                     ((type *)param_1);
  *(undefined8 *)this = *puVar1;
  puVar1 = (undefined8 *)
           forward<__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>>
                     ((type *)(param_1 + 2));
  *(undefined8 *)(this + 8) = *puVar1;
  return this;
}





undefined8 __thiscall
__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>::operator*
          (__normal_iterator<int*,std::vector<int,std::allocator<int>>> *this)

{
  return *(undefined8 *)this;
}






pair std::
     mismatch<__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>,bool(*)(int,int)>
               (__normal_iterator param_1,__normal_iterator param_2,__normal_iterator param_3,
               _func_bool_int_int *param_4)

{
  _Iter_comp_iter _Var1;
  pair pVar2;
  
  _Var1 = __gnu_cxx::__ops::__iter_comp_iter<bool(*)(int,int)>(param_4);
  pVar2 = __mismatch<__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>,__gnu_cxx::__ops::_Iter_comp_iter<bool(*)(int,int)>>
                    (param_1,param_2,param_3,_Var1);
  return pVar2;
}






void __gnu_cxx::new_allocator<int>::new_allocator(void)

{
  return;
}





void __thiscall __gnu_cxx::new_allocator<int>::~new_allocator(new_allocator<int> *this)

{
  return;
}





void __thiscall
std::_Vector_base<int,std::allocator<int>>::_Vector_impl::~_Vector_impl(_Vector_impl *this)

{
  allocator<int>::~allocator((allocator<int> *)this);
  return;
}





void __thiscall
std::_Vector_base<int,std::allocator<int>>::_Vector_base
          (_Vector_base<int,std::allocator<int>> *this,allocator *param_1)

{
  _Vector_impl::_Vector_impl((_Vector_impl *)this,param_1);
  return;
}





void __thiscall
std::_Vector_base<int,std::allocator<int>>::~_Vector_base
          (_Vector_base<int,std::allocator<int>> *this)

{
  _M_deallocate(this,*(int **)this,*(long *)(this + 0x10) - *(long *)this >> 2);
  _Vector_impl::~_Vector_impl((_Vector_impl *)this);
  return;
}






undefined8 std::initializer_list<int>::begin(void)

{
  undefined8 *in_RDI;
  
  return *in_RDI;
}






long std::initializer_list<int>::end(void)

{
  long lVar1;
  long lVar2;
  
  lVar1 = begin();
  lVar2 = size();
  return lVar2 * 4 + lVar1;
}






difference_type std::distance<int_const*>(int *param_1,int *param_2)

{
  difference_type dVar1;
  int *local_10;
  
  local_10 = param_1;
  __iterator_category<int_const*>(&local_10);
  dVar1 = __distance<int_const*>(local_10,param_2,(random_access_iterator_tag)param_2);
  return dVar1;
}





void std::vector<int,std::allocator<int>>::_M_range_initialize<int_const*>
               (int *param_1,int *param_2,forward_iterator_tag param_3)

{
  difference_type dVar1;
  undefined4 extraout_var;
  allocator *paVar2;
  ulong uVar3;
  undefined8 uVar4;
  int *piVar5;
  undefined4 in_register_00000014;
  
  dVar1 = distance<int_const*>(param_2,(int *)CONCAT44(in_register_00000014,param_3));
  paVar2 = (allocator *)_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator();
  uVar3 = _S_check_init_len(CONCAT44(extraout_var,dVar1),paVar2);
  uVar4 = _Vector_base<int,std::allocator<int>>::_M_allocate
                    ((_Vector_base<int,std::allocator<int>> *)param_1,uVar3);
  *(undefined8 *)param_1 = uVar4;
  *(ulong *)(param_1 + 4) = *(long *)param_1 + CONCAT44(extraout_var,dVar1) * 4;
  paVar2 = (allocator *)_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator();
  piVar5 = __uninitialized_copy_a<int_const*,int*,int>
                     (param_2,(int *)CONCAT44(in_register_00000014,param_3),*(int **)param_1,paVar2)
  ;
  *(int **)(param_1 + 2) = piVar5;
  return;
}






undefined8 std::_Vector_base<int,std::allocator<int>>::_M_get_Tp_allocator(void)

{
  undefined8 in_RDI;
  
  return in_RDI;
}






void std::_Destroy<int*,int>(int *param_1,int *param_2,allocator *param_3)

{
  _Destroy<int*>(param_1,param_2);
  return;
}





void __thiscall
__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>::__normal_iterator
          (__normal_iterator<int*,std::vector<int,std::allocator<int>>> *this,int **param_1)

{
  *(int **)this = *param_1;
  return;
}






pair std::
     __mismatch<__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>,__gnu_cxx::__ops::_Iter_equal_to_iter>
               (__normal_iterator param_1,__normal_iterator param_2,__normal_iterator param_3,
               _Iter_equal_to_iter param_4)

{
  bool bVar1;
  undefined4 in_register_00000014;
  undefined4 in_register_00000034;
  undefined4 in_register_0000003c;
  long in_FS_OFFSET;
  _Iter_equal_to_iter local_41;
  undefined8 local_40;
  undefined8 local_38;
  undefined8 local_30;
  undefined8 local_28 [3];
  long local_10;
  
  local_30 = CONCAT44(in_register_0000003c,param_1);
  local_38 = CONCAT44(in_register_00000034,param_2);
  local_40 = CONCAT44(in_register_00000014,param_3);
  local_10 = *(long *)(in_FS_OFFSET + 0x28);
  do {
    bVar1 = __gnu_cxx::operator!=((__normal_iterator *)&local_30,(__normal_iterator *)&local_38);
    if (bVar1) {
      bVar1 = __gnu_cxx::__ops::_Iter_equal_to_iter::operator()
                        (&local_41,(__normal_iterator)local_30,(__normal_iterator)local_40);
      if (!bVar1) goto LAB_00101cfb;
      bVar1 = true;
    }
    else {
LAB_00101cfb:
      bVar1 = false;
    }
    if (!bVar1) {
      pair<__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>>
      ::
      pair<__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>&,__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>&,true>
                ((pair<__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>>
                  *)local_28,(__normal_iterator *)&local_30,(__normal_iterator *)&local_40);
      if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {
                    
        __stack_chk_fail();
      }
      return (pair)local_28[0];
    }
    __gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>::operator++
              ((__normal_iterator<int*,std::vector<int,std::allocator<int>>> *)&local_30);
    __gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>::operator++
              ((__normal_iterator<int*,std::vector<int,std::allocator<int>>> *)&local_40);
  } while( true );
}






__normal_iterator *
std::forward<__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>>(type *param_1)

{
  return (__normal_iterator *)param_1;
}





_Iter_comp_iter __gnu_cxx::__ops::__iter_comp_iter<bool(*)(int,int)>(_func_bool_int_int *param_1)

{
  _func_bool_int_int **pp_Var1;
  long in_FS_OFFSET;
  _func_bool_int_int *local_20;
  _Iter_comp_iter local_18 [2];
  long local_10;
  
  local_10 = *(long *)(in_FS_OFFSET + 0x28);
  local_20 = param_1;
  pp_Var1 = (_func_bool_int_int **)std::move<bool(*&)(int,int)>((_func_bool_int_int *)&local_20);
  _Iter_comp_iter<bool(*)(int,int)>::_Iter_comp_iter
            ((_Iter_comp_iter<bool(*)(int,int)> *)local_18,*pp_Var1);
  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {
                    
    __stack_chk_fail();
  }
  return local_18[0];
}






pair std::
     __mismatch<__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>,__gnu_cxx::__ops::_Iter_comp_iter<bool(*)(int,int)>>
               (__normal_iterator param_1,__normal_iterator param_2,__normal_iterator param_3,
               _Iter_comp_iter param_4)

{
  bool bVar1;
  undefined4 in_register_0000000c;
  undefined4 in_register_00000014;
  undefined4 in_register_00000034;
  undefined4 in_register_0000003c;
  long in_FS_OFFSET;
  undefined8 local_48;
  undefined8 local_40;
  undefined8 local_38;
  undefined8 local_30;
  undefined8 local_28 [3];
  long local_10;
  
  local_30 = CONCAT44(in_register_0000003c,param_1);
  local_38 = CONCAT44(in_register_00000034,param_2);
  local_40 = CONCAT44(in_register_00000014,param_3);
  local_48 = CONCAT44(in_register_0000000c,param_4);
  local_10 = *(long *)(in_FS_OFFSET + 0x28);
  do {
    bVar1 = __gnu_cxx::operator!=((__normal_iterator *)&local_30,(__normal_iterator *)&local_38);
    if (bVar1) {
      bVar1 = __gnu_cxx::__ops::_Iter_comp_iter<bool(*)(int,int)>::operator()
                        ((_Iter_comp_iter<bool(*)(int,int)> *)&local_48,(__normal_iterator)local_30,
                         (__normal_iterator)local_40);
      if (!bVar1) goto LAB_00101e20;
      bVar1 = true;
    }
    else {
LAB_00101e20:
      bVar1 = false;
    }
    if (!bVar1) {
      pair<__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>>
      ::
      pair<__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>&,__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>&,true>
                ((pair<__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>>
                  *)local_28,(__normal_iterator *)&local_30,(__normal_iterator *)&local_40);
      if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {
                    
        __stack_chk_fail();
      }
      return (pair)local_28[0];
    }
    __gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>::operator++
              ((__normal_iterator<int*,std::vector<int,std::allocator<int>>> *)&local_30);
    __gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>::operator++
              ((__normal_iterator<int*,std::vector<int,std::allocator<int>>> *)&local_40);
  } while( true );
}





void __thiscall
std::_Vector_base<int,std::allocator<int>>::_Vector_impl::_Vector_impl
          (_Vector_impl *this,allocator *param_1)

{
  allocator<int>::allocator((allocator *)this);
  _Vector_impl_data::_Vector_impl_data((_Vector_impl_data *)this);
  return;
}





void __thiscall
std::_Vector_base<int,std::allocator<int>>::_M_deallocate
          (_Vector_base<int,std::allocator<int>> *this,int *param_1,ulong param_2)

{
  if (param_1 != (int *)0x0) {
    allocator_traits<std::allocator<int>>::deallocate((allocator *)this,param_1,param_2);
  }
  return;
}






undefined8 std::initializer_list<int>::size(void)

{
  long in_RDI;
  
  return *(undefined8 *)(in_RDI + 8);
}






iterator_category std::__iterator_category<int_const*>(int **param_1)

{
  iterator_category in_EAX;
  
  return in_EAX;
}






difference_type
std::__distance<int_const*>(int *param_1,int *param_2,random_access_iterator_tag param_3)

{
  return (difference_type)((long)param_2 - (long)param_1 >> 2);
}





ulong std::vector<int,std::allocator<int>>::_S_check_init_len(ulong param_1,allocator *param_2)

{
  ulong uVar1;
  long in_FS_OFFSET;
  allocator local_21;
  long local_20;
  
  local_20 = *(long *)(in_FS_OFFSET + 0x28);
  allocator<int>::allocator(&local_21);
  uVar1 = _S_max_size(&local_21);
  allocator<int>::~allocator((allocator<int> *)&local_21);
  if (uVar1 < param_1) {
    std::__throw_length_error("cannot create std::vector larger than max_size()");
  }
  if (local_20 != *(long *)(in_FS_OFFSET + 0x28)) {
                    
    __stack_chk_fail();
  }
  return param_1;
}





undefined8 __thiscall
std::_Vector_base<int,std::allocator<int>>::_M_allocate
          (_Vector_base<int,std::allocator<int>> *this,ulong param_1)

{
  undefined8 uVar1;
  
  if (param_1 == 0) {
    uVar1 = 0;
  }
  else {
    uVar1 = allocator_traits<std::allocator<int>>::allocate((allocator *)this,param_1);
  }
  return uVar1;
}






int * std::__uninitialized_copy_a<int_const*,int*,int>
                (int *param_1,int *param_2,int *param_3,allocator *param_4)

{
  int *piVar1;
  
  piVar1 = uninitialized_copy<int_const*,int*>(param_1,param_2,param_3);
  return piVar1;
}






void std::_Destroy<int*>(int *param_1,int *param_2)

{
  _Destroy_aux<true>::__destroy<int*>(param_1,param_2);
  return;
}





bool __gnu_cxx::operator!=(__normal_iterator *param_1,__normal_iterator *param_2)

{
  long lVar1;
  long *plVar2;
  
  plVar2 = (long *)__normal_iterator<int*,std::vector<int,std::allocator<int>>>::base();
  lVar1 = *plVar2;
  plVar2 = (long *)__normal_iterator<int*,std::vector<int,std::allocator<int>>>::base();
  return lVar1 != *plVar2;
}





bool __thiscall
__gnu_cxx::__ops::_Iter_equal_to_iter::operator()
          (_Iter_equal_to_iter *this,__normal_iterator param_1,__normal_iterator param_2)

{
  int iVar1;
  int *piVar2;
  undefined4 in_register_00000014;
  undefined4 in_register_00000034;
  undefined8 local_30;
  undefined8 local_28;
  _Iter_equal_to_iter *local_20;
  
  local_28 = CONCAT44(in_register_00000034,param_1);
  local_30 = CONCAT44(in_register_00000014,param_2);
  local_20 = this;
  piVar2 = (int *)__normal_iterator<int*,std::vector<int,std::allocator<int>>>::operator*
                            ((__normal_iterator<int*,std::vector<int,std::allocator<int>>> *)
                             &local_28);
  iVar1 = *piVar2;
  piVar2 = (int *)__normal_iterator<int*,std::vector<int,std::allocator<int>>>::operator*
                            ((__normal_iterator<int*,std::vector<int,std::allocator<int>>> *)
                             &local_30);
  return iVar1 == *piVar2;
}





__normal_iterator<int*,std::vector<int,std::allocator<int>>> * __thiscall
__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>::operator++
          (__normal_iterator<int*,std::vector<int,std::allocator<int>>> *this)

{
  *(long *)this = *(long *)this + 4;
  return this;
}





void __thiscall
std::
pair<__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>>
::
pair<__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>&,__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>&,true>
          (pair<__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>,__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>>
           *this,__normal_iterator *param_1,__normal_iterator *param_2)

{
  undefined8 *puVar1;
  
  puVar1 = (undefined8 *)
           forward<__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>&>
                     ((type *)param_1);
  *(undefined8 *)this = *puVar1;
  puVar1 = (undefined8 *)
           forward<__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>&>
                     ((type *)param_2);
  *(undefined8 *)(this + 8) = *puVar1;
  return;
}






type * std::move<bool(*&)(int,int)>(_func_bool_int_int *param_1)

{
  return (type *)param_1;
}





void __thiscall
__gnu_cxx::__ops::_Iter_comp_iter<bool(*)(int,int)>::_Iter_comp_iter
          (_Iter_comp_iter<bool(*)(int,int)> *this,_func_bool_int_int *param_1)

{
  undefined8 *puVar1;
  _func_bool_int_int *local_18;
  undefined8 *local_10;
  
  local_18 = param_1;
  local_10 = (undefined8 *)this;
  puVar1 = (undefined8 *)std::move<bool(*&)(int,int)>((_func_bool_int_int *)&local_18);
  *local_10 = *puVar1;
  return;
}





bool __thiscall
__gnu_cxx::__ops::_Iter_comp_iter<bool(*)(int,int)>::operator()
          (_Iter_comp_iter<bool(*)(int,int)> *this,__normal_iterator param_1,
          __normal_iterator param_2)

{
  undefined4 uVar1;
  code *pcVar2;
  undefined uVar3;
  undefined4 *puVar4;
  undefined4 in_register_00000014;
  undefined4 in_register_00000034;
  undefined8 local_30;
  undefined8 local_28;
  _Iter_comp_iter<bool(*)(int,int)> *local_20;
  
  local_28 = CONCAT44(in_register_00000034,param_1);
  local_30 = CONCAT44(in_register_00000014,param_2);
  pcVar2 = *(code **)this;
  local_20 = this;
  puVar4 = (undefined4 *)
           __normal_iterator<int*,std::vector<int,std::allocator<int>>>::operator*
                     ((__normal_iterator<int*,std::vector<int,std::allocator<int>>> *)&local_30);
  uVar1 = *puVar4;
  puVar4 = (undefined4 *)
           __normal_iterator<int*,std::vector<int,std::allocator<int>>>::operator*
                     ((__normal_iterator<int*,std::vector<int,std::allocator<int>>> *)&local_28);
  uVar3 = (*pcVar2)(*puVar4,uVar1);
  return (bool)uVar3;
}





void std::allocator<int>::allocator(allocator *param_1)

{
  __gnu_cxx::new_allocator<int>::new_allocator((new_allocator *)param_1);
  return;
}





void __thiscall
std::_Vector_base<int,std::allocator<int>>::_Vector_impl_data::_Vector_impl_data
          (_Vector_impl_data *this)

{
  *(undefined8 *)this = 0;
  *(undefined8 *)(this + 8) = 0;
  *(undefined8 *)(this + 0x10) = 0;
  return;
}





void std::allocator_traits<std::allocator<int>>::deallocate
               (allocator *param_1,int *param_2,ulong param_3)

{
  __gnu_cxx::new_allocator<int>::deallocate((new_allocator<int> *)param_1,param_2,param_3);
  return;
}





ulong std::vector<int,std::allocator<int>>::_S_max_size(allocator *param_1)

{
  ulong *puVar1;
  long in_FS_OFFSET;
  ulong local_20;
  ulong local_18;
  long local_10;
  
  local_10 = *(long *)(in_FS_OFFSET + 0x28);
  local_20 = 0x1fffffffffffffff;
  local_18 = allocator_traits<std::allocator<int>>::max_size(param_1);
  puVar1 = min<unsigned_long>(&local_20,&local_18);
  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {
                    
    __stack_chk_fail();
  }
  return *puVar1;
}





void std::allocator_traits<std::allocator<int>>::allocate(allocator *param_1,ulong param_2)

{
  __gnu_cxx::new_allocator<int>::allocate((ulong)param_1,(void *)param_2);
  return;
}






int * std::uninitialized_copy<int_const*,int*>(int *param_1,int *param_2,int *param_3)

{
  int *piVar1;
  
  piVar1 = __uninitialized_copy<true>::__uninit_copy<int_const*,int*>(param_1,param_2,param_3);
  return piVar1;
}





void std::_Destroy_aux<true>::__destroy<int*>(int *param_1,int *param_2)

{
  return;
}






undefined8 __gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>::base(void)

{
  undefined8 in_RDI;
  
  return in_RDI;
}






__normal_iterator *
std::forward<__gnu_cxx::__normal_iterator<int*,std::vector<int,std::allocator<int>>>&>
          (type *param_1)

{
  return (__normal_iterator *)param_1;
}





void __gnu_cxx::new_allocator<int>::new_allocator(new_allocator *param_1)

{
  return;
}





void __thiscall
__gnu_cxx::new_allocator<int>::deallocate(new_allocator<int> *this,int *param_1,ulong param_2)

{
  operator_delete(param_1,param_2 * 4);
  return;
}





void std::allocator_traits<std::allocator<int>>::max_size(allocator *param_1)

{
  __gnu_cxx::new_allocator<int>::max_size();
  return;
}






undefined8 __gnu_cxx::new_allocator<int>::_M_max_size(void)

{
  return 0x1fffffffffffffff;
}





void __gnu_cxx::new_allocator<int>::allocate(ulong param_1,void *param_2)

{
  void *pvVar1;
  
  pvVar1 = (void *)_M_max_size();
  if (pvVar1 < param_2) {
    if ((void *)0x3fffffffffffffff < param_2) {
      std::__throw_bad_array_new_length();
    }
    std::__throw_bad_alloc();
  }
  operator_new((long)param_2 << 2);
  return;
}





int * std::__uninitialized_copy<true>::__uninit_copy<int_const*,int*>
                (int *param_1,int *param_2,int *param_3)

{
  int *piVar1;
  
  piVar1 = copy<int_const*,int*>(param_1,param_2,param_3);
  return piVar1;
}






void __gnu_cxx::new_allocator<int>::max_size(void)

{
  _M_max_size();
  return;
}






int * std::copy<int_const*,int*>(int *param_1,int *param_2,int *param_3)

{
  int *piVar1;
  int *piVar2;
  
  piVar1 = __miter_base<int_const*>(param_2);
  piVar2 = __miter_base<int_const*>(param_1);
  piVar1 = __copy_move_a<false,int_const*,int*>(piVar2,piVar1,param_3);
  return piVar1;
}






int * std::__miter_base<int_const*>(int *param_1)

{
  return param_1;
}






int * std::__copy_move_a<false,int_const*,int*>(int *param_1,int *param_2,int *param_3)

{
  int *piVar1;
  int *piVar2;
  int *piVar3;
  int *local_30;
  int *local_28;
  int *local_20;
  
  local_30 = param_3;
  local_28 = param_2;
  local_20 = param_1;
  piVar1 = __niter_base<int*>(param_3);
  piVar2 = __niter_base<int_const*>(local_28);
  piVar3 = __niter_base<int_const*>(local_20);
  piVar1 = __copy_move_a1<false,int_const*,int*>(piVar3,piVar2,piVar1);
  piVar1 = __niter_wrap<int*>(&local_30,piVar1);
  return piVar1;
}






int * std::__niter_base<int_const*>(int *param_1)

{
  return param_1;
}






int * std::__niter_base<int*>(int *param_1)

{
  return param_1;
}






int * std::__copy_move_a1<false,int_const*,int*>(int *param_1,int *param_2,int *param_3)

{
  int *piVar1;
  
  piVar1 = __copy_move_a2<false,int_const*,int*>(param_1,param_2,param_3);
  return piVar1;
}






int * std::__niter_wrap<int*>(int **param_1,int *param_2)

{
  return param_2;
}






int * std::__copy_move_a2<false,int_const*,int*>(int *param_1,int *param_2,int *param_3)

{
  int *piVar1;
  
  piVar1 = __copy_move<false,true,std::random_access_iterator_tag>::__copy_m<int>
                     (param_1,param_2,param_3);
  return piVar1;
}





int * std::__copy_move<false,true,std::random_access_iterator_tag>::__copy_m<int>
                (int *param_1,int *param_2,int *param_3)

{
  long lVar1;
  
  lVar1 = (long)param_2 - (long)param_1 >> 2;
  if (lVar1 != 0) {
    memmove(param_3,param_1,lVar1 * 4);
  }
  return param_3 + lVar1;
}



void _fini(void)

{
  return;
}






void std::__throw_bad_alloc(void)

{
                    
                    
  halt_baddata();
}






basic_ostream * std::endl<char,std::char_traits<char>>(basic_ostream *param_1)

{
                    
                    
  halt_baddata();
}






void std::__throw_length_error(char *param_1)

{
                    
                    
  halt_baddata();
}





void __libc_start_main(void)

{
                    
                    
  halt_baddata();
}






void std::__throw_bad_array_new_length(void)

{
                    
                    
  halt_baddata();
}





void __cxa_atexit(void)

{
                    
                    
  halt_baddata();
}






basic_ostream * std::operator<<(basic_ostream *param_1,char *param_2)

{
                    
                    
  halt_baddata();
}






void * operator_new(ulong param_1)

{
                    
                    
  halt_baddata();
}






void operator_delete(void *param_1,ulong param_2)

{
                    
                    
  halt_baddata();
}





void __thiscall
std::basic_ostream<char,std::char_traits<char>>::operator<<
          (basic_ostream<char,std::char_traits<char>> *this,
          _func_basic_ostream_ptr_basic_ostream_ptr *param_1)

{
                    
                    
  halt_baddata();
}





void __stack_chk_fail(void)

{
                    
                    
  halt_baddata();
}





void __thiscall std::ios_base::Init::Init(Init *this)

{
                    
                    
  halt_baddata();
}






void * memmove(void *__dest,void *__src,size_t __n)

{
                    
                    
  halt_baddata();
}





void __gxx_personality_v0(void)

{
                    
                    
  halt_baddata();
}





void __thiscall
std::basic_ostream<char,std::char_traits<char>>::operator<<
          (basic_ostream<char,std::char_traits<char>> *this,int param_1)

{
                    
                    
  halt_baddata();
}





void _ITM_deregisterTMCloneTable(void)

{
                    
  halt_baddata();
}





void _Unwind_Resume(void)

{
                    
                    
  halt_baddata();
}





void __gmon_start__(void)

{
                    
  halt_baddata();
}





void _ITM_registerTMCloneTable(void)

{
                    
  halt_baddata();
}





void __thiscall std::ios_base::Init::~Init(Init *this)

{
                    
                    
  halt_baddata();
}





void __cxa_finalize(void)

{
                    
                    
  halt_baddata();
}


