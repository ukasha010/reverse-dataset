
int _init(EVP_PKEY_CTX *ctx)

{
  undefined *puVar1;
  
  puVar1 = PTR___gmon_start___00103fe8;
  if (PTR___gmon_start___00103fe8 != (undefined *)0x0) {
    puVar1 = (undefined *)(*(code *)PTR___gmon_start___00103fe8)();
  }
  return (int)puVar1;
}



void FUN_00101020(void)

{
  (*(code *)PTR_00103fa0)();
  return;
}



void __cxa_finalize(void)

{
  (*(code *)PTR___cxa_finalize_00103fd0)();
  return;
}



void __cxa_atexit(void)

{
  (*(code *)PTR___cxa_atexit_00103fa8)();
  return;
}





basic_ostream * std::operator<<(basic_ostream *param_1,char *param_2)

{
  basic_ostream *pbVar1;
  
  pbVar1 = (basic_ostream *)(*(code *)PTR_operator<<_00103fb0)();
  return pbVar1;
}



void __thiscall std::ios_base::Init::Init(Init *this)

{
  (*(code *)PTR_Init_00103fb8)();
  return;
}



void __thiscall
std::basic_ostream<char,std::char_traits<char>>::operator<<
          (basic_ostream<char,std::char_traits<char>> *this,int param_1)

{
  (*(code *)PTR_operator<<_00103fc0)();
  return;
}





double pow(double __x,double __y)

{
  double dVar1;
  
  dVar1 = (double)(*(code *)PTR_pow_00103fc8)();
  return dVar1;
}



void processEntry _start(undefined8 param_1,undefined8 param_2)

{
  undefined auStack_8 [8];
  
  (*(code *)PTR___libc_start_main_00103fd8)(main,param_2,&stack0x00000008,0,0,param_1,auStack_8);
  do {
                    
  } while( true );
}






void deregister_tm_clones(void)

{
  return;
}






void register_tm_clones(void)

{
  return;
}



void __do_global_dtors_aux(void)

{
  if (completed_0 == '\0') {
    if (PTR___cxa_finalize_00103fd0 != (undefined *)0x0) {
      __cxa_finalize(__dso_handle);
    }
    deregister_tm_clones();
    completed_0 = 1;
    return;
  }
  return;
}



void frame_dummy(void)

{
  register_tm_clones();
  return;
}





bool Armstrong(int param_1)

{
  double extraout_XMM0_Qa;
  int local_10;
  int local_c;
  
  local_c = 0;
  for (local_10 = param_1; local_10 != 0; local_10 = local_10 / 10) {
    std::pow<int,int>(local_10 % 10,3);
    local_c = (int)(extraout_XMM0_Qa + (double)local_c);
  }
  return local_c == param_1;
}



undefined8 main(void)

{
  char cVar1;
  basic_ostream *pbVar2;
  int local_c;
  
  for (local_c = 0; local_c < 1000; local_c = local_c + 1) {
    cVar1 = Armstrong(local_c);
    if (cVar1 == '\x01') {
      pbVar2 = (basic_ostream *)
               std::basic_ostream<char,std::char_traits<char>>::operator<<
                         ((basic_ostream<char,std::char_traits<char>> *)std::cout,local_c);
      std::operator<<(pbVar2,"  ");
    }
  }
  return 0;
}





void __static_initialization_and_destruction_0(int param_1,int param_2)

{
  if ((param_1 == 1) && (param_2 == 0xffff)) {
    std::ios_base::Init::Init((Init *)&std::__ioinit);
    __cxa_atexit(PTR__Init_00103ff8,&std::__ioinit,&__dso_handle);
  }
  return;
}






void _GLOBAL__sub_I_Armstrong(void)

{
  __static_initialization_and_destruction_0(1,0xffff);
  return;
}






__type std::pow<int,int>(int param_1,int param_2)

{
  double dVar1;
  
  dVar1 = pow((double)param_1,(double)param_2);
  return SUB84(dVar1,0);
}



void _fini(void)

{
  return;
}





void __libc_start_main(void)

{
                    
                    
  halt_baddata();
}





void __cxa_atexit(void)

{
                    
                    
  halt_baddata();
}






basic_ostream * std::operator<<(basic_ostream *param_1,char *param_2)

{
                    
                    
  halt_baddata();
}





void __thiscall std::ios_base::Init::Init(Init *this)

{
                    
                    
  halt_baddata();
}





void __thiscall
std::basic_ostream<char,std::char_traits<char>>::operator<<
          (basic_ostream<char,std::char_traits<char>> *this,int param_1)

{
                    
                    
  halt_baddata();
}






double pow(double __x,double __y)

{
                    
                    
  halt_baddata();
}





void _ITM_deregisterTMCloneTable(void)

{
                    
  halt_baddata();
}





void __gmon_start__(void)

{
                    
  halt_baddata();
}





void _ITM_registerTMCloneTable(void)

{
                    
  halt_baddata();
}





void __thiscall std::ios_base::Init::~Init(Init *this)

{
                    
                    
  halt_baddata();
}





void __cxa_finalize(void)

{
                    
                    
  halt_baddata();
}


